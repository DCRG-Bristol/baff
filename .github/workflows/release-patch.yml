name: Release Patch

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release-patch:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ensure tags and full history are available

      - name: Configure Git author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Bump patch version in version.txt
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          # Read current version and normalize line endings
          if [[ ! -f version.txt ]]; then
            echo "version.txt not found" >&2
            exit 1
          fi
          VERSION=$(tr -d '\r' < version.txt | tr -d '\n')
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version in version.txt: '$VERSION' (expected X.Y.Z)" >&2
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          echo "$NEW_VERSION" > version.txt
          git add version.txt
          if git diff --staged --quiet; then
            echo "No changes detected in version.txt; nothing to commit."
          else
            git commit -m "chore(release): bump version to ${NEW_VERSION}"
          fi

          echo "new_version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=v${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Push version bump commit
        run: |
          # Push back to the same branch this workflow ran on
          git push origin HEAD

      - name: Create and push tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.bump.outputs.tag }}"
          # Fail if tag already exists remotely
          if git ls-remote --exit-code --tags origin "refs/tags/${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists on origin; aborting." >&2
            exit 1
          fi
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.tag }}
          name: ${{ steps.bump.outputs.tag }}
          generate_release_notes: true
